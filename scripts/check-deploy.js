#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é...\n');

let hasErrors = false;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:');
const keyFiles = [
  'package.json',
  'next.config.js',
  'tsconfig.json',
  'prisma/schema.prisma',
  'app/layout.tsx',
  'app/page.tsx'
];

keyFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    hasErrors = true;
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: package.json —Å–∫—Ä–∏–ø—Ç—ã
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ package.json:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const requiredScripts = ['build', 'start', 'dev'];
  
  requiredScripts.forEach(script => {
    if (packageJson.scripts && packageJson.scripts[script]) {
      console.log(`‚úÖ ${script}: ${packageJson.scripts[script]}`);
    } else {
      console.log(`‚ùå ${script} - –ù–ï –ù–ê–ô–î–ï–ù`);
      hasErrors = true;
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
  const requiredDeps = ['next', 'react', '@prisma/client', 'typescript'];
  
  requiredDeps.forEach(dep => {
    if ((packageJson.dependencies && packageJson.dependencies[dep]) || 
        (packageJson.devDependencies && packageJson.devDependencies[dep])) {
      console.log(`‚úÖ ${dep}`);
    } else {
      console.log(`‚ùå ${dep} - –ù–ï –ù–ê–ô–î–ï–ù`);
      hasErrors = true;
    }
  });
  
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
  hasErrors = true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: Prisma —Å—Ö–µ–º–∞
console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Prisma —Å—Ö–µ–º—ã:');
try {
  const schema = fs.readFileSync('prisma/schema.prisma', 'utf8');
  
  if (schema.includes('provider = "postgresql"')) {
    console.log('‚úÖ PostgreSQL –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    console.log('‚ùå PostgreSQL –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    hasErrors = true;
  }
  
  if (schema.includes('env("DATABASE_URL")')) {
    console.log('‚úÖ DATABASE_URL –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
  } else {
    console.log('‚ùå DATABASE_URL –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    hasErrors = true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  const requiredModels = ['User', 'Product', 'Category', 'CartItem'];
  requiredModels.forEach(model => {
    if (schema.includes(`model ${model}`)) {
      console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${model} –Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      console.log(`‚ùå –ú–æ–¥–µ–ª—å ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      hasErrors = true;
    }
  });
  
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è schema.prisma: ${error.message}`);
  hasErrors = true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: API —Ä–æ—É—Ç—ã
console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤:');
const apiRoutes = [
  'app/api/products/route.ts',
  'app/api/cart/route.ts',
  'app/api/auth/login/route.ts',
  'app/api/search/route.ts'
];

apiRoutes.forEach(route => {
  if (fs.existsSync(route)) {
    console.log(`‚úÖ ${route}`);
  } else {
    console.log(`‚ùå ${route} - –ù–ï –ù–ê–ô–î–ï–ù`);
    hasErrors = true;
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
const uiComponents = [
  'components/ui/Button.tsx',
  'components/ui/Input.tsx',
  'components/ProductCard.tsx',
  'components/Header.tsx'
];

uiComponents.forEach(component => {
  if (fs.existsSync(component)) {
    console.log(`‚úÖ ${component}`);
  } else {
    console.log(`‚ùå ${component} - –ù–ï –ù–ê–ô–î–ï–ù`);
    hasErrors = true;
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript:');
try {
  const tsconfig = JSON.parse(fs.readFileSync('tsconfig.json', 'utf8'));
  
  if (tsconfig.compilerOptions && tsconfig.compilerOptions.baseUrl) {
    console.log('‚úÖ baseUrl –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    console.log('‚ö†Ô∏è baseUrl –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
  }
  
  if (tsconfig.compilerOptions && tsconfig.compilerOptions.paths) {
    console.log('‚úÖ Path mapping –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } else {
    console.log('‚ö†Ô∏è Path mapping –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
  }
  
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tsconfig.json: ${error.message}`);
  hasErrors = true;
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\n' + '='.repeat(50));
if (hasErrors) {
  console.log('‚ùå –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ');
  console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.\n');
  process.exit(1);
} else {
  console.log('‚úÖ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!');
  console.log('–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ Vercel.\n');
  
  console.log('üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
  console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel (DATABASE_URL, NEXTAUTH_SECRET)');
  console.log('2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Vercel');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π');
  console.log('4. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ - –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –∞–¥–º–∏–Ω–æ–º\n');
  
  process.exit(0);
} 