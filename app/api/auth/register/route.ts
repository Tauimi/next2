import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { hashPassword, createToken } from '@/lib/auth'
import { isValidEmail } from '@/lib/utils'

// –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–æ—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  console.log('Registration API called')
  
  try {
    const body = await request.json()
    const { 
      email, 
      password, 
      username, 
      firstName, 
      lastName, 
      phone 
    } = body

    console.log('Registration attempt for:', email)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!email || !password || !username) {
      return NextResponse.json(
        { error: 'Email, –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!isValidEmail(email)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 8) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è username
    if (username.length < 3) {
      return NextResponse.json(
        { error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
    const existingUserByEmail = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    })

    if (existingUserByEmail) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 409 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
    const existingUserByUsername = await prisma.user.findUnique({
      where: { username: username.toLowerCase() }
    })

    if (existingUserByUsername) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 409 }
      )
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await hashPassword(password)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    const usersCount = await prisma.user.count()
    const isFirstUser = usersCount === 0

    console.log(`Total users in system: ${usersCount}, is first user: ${isFirstUser}`)

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        username: username.toLowerCase(),
        password: hashedPassword,
        firstName: firstName || null,
        lastName: lastName || null,
        phone: phone || null,
        isAdmin: isFirstUser, // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        isActive: true,
      }
    })

    if (isFirstUser) {
      console.log('üéâ First user registered as admin:', user.email)
    }

    console.log('User created in database:', user.email)

    // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    const token = createToken({
      userId: user.id,
      email: user.email,
      username: user.username,
      isAdmin: user.isAdmin,
    })

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    const userData = {
      id: user.id,
      email: user.email,
      username: user.username,
      firstName: user.firstName,
      lastName: user.lastName,
      phone: user.phone,
      isAdmin: user.isAdmin,
      createdAt: user.createdAt,
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookie
    const response = NextResponse.json({
      success: true,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
        user: userData,
        token,
    })

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP-only cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
      path: '/',
    })

    return response

  } catch (error) {
    console.error('Registration error:', error)
    
    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (error instanceof Error) {
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: process.env.NODE_ENV === 'development' ? error instanceof Error ? error.message : 'Unknown error' : undefined
      },
      { status: 500 }
    )
  }
} 