import { prisma } from './prisma'

// Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
export async function withRetry<T>(
  operation: () => Promise<T>,
  maxRetries = 3,
  baseDelay = 1000
): Promise<T> {
  let lastError: Error
  
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await operation()
    } catch (error) {
      lastError = error instanceof Error ? error : new Error(String(error))
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
      console.warn(`Database operation failed (attempt ${i + 1}/${maxRetries}):`, lastError.message)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–µ –∂–¥–µ–º
      if (i < maxRetries - 1) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        const delay = baseDelay * Math.pow(2, i)
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    }
  }
  
  throw lastError!
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
export function setupQueryMonitoring() {
  if (process.env.NODE_ENV === 'development') {
    prisma.$on('query' as never, (e: any) => {
      if (e.duration > 1000) {
        console.warn(`üêå Slow query detected: ${e.duration}ms`)
        console.warn(`Query: ${e.query}`)
        console.warn(`Params: ${e.params}`)
      }
    })

    prisma.$on('error' as never, (e: any) => {
      console.error('üö® Database error:', e)
    })
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
export async function checkDatabaseHealth(): Promise<{
  status: 'healthy' | 'unhealthy'
  latency?: number
  error?: string
}> {
  try {
    const start = Date.now()
    await prisma.$queryRaw`SELECT 1`
    const latency = Date.now() - start
    
    return {
      status: 'healthy',
      latency
    }
  } catch (error) {
    return {
      status: 'unhealthy',
      error: (error as Error).message
    }
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export function getSafePagination(
  page?: string | null,
  limit?: string | null,
  maxLimit = 100,
  defaultLimit = 12
) {
  const parsedPage = Math.max(1, parseInt(page || '1'))
  const parsedLimit = Math.min(
    Math.max(1, parseInt(limit || defaultLimit.toString())),
    maxLimit
  )
  
  return {
    page: parsedPage,
    limit: parsedLimit,
    skip: (parsedPage - 1) * parsedLimit,
    take: parsedLimit
  }
}

// –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
export function buildSearchFilters(searchTerm?: string | null) {
  if (!searchTerm || searchTerm.trim().length === 0) {
    return {}
  }

  const term = searchTerm.trim()
  
  return {
    OR: [
      { name: { contains: term, mode: 'insensitive' as const } },
      { description: { contains: term, mode: 'insensitive' as const } },
      { sku: { contains: term, mode: 'insensitive' as const } }
    ]
  }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ include –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
export const optimizedProductInclude = {
  category: {
    select: {
      id: true,
      name: true,
      slug: true
    }
  },
  brand: {
    select: {
      id: true,
      name: true,
      slug: true
    }
  },
  images: {
    where: { isPrimary: true },
    take: 1,
    select: {
      url: true,
      alt: true
    }
  }
}

// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
export async function safeTransaction<T>(
  operation: (tx: any) => Promise<T>,
  options: {
    maxWait?: number
    timeout?: number
  } = {}
): Promise<T> {
  const { maxWait = 5000, timeout = 10000 } = options
  
  return withRetry(
    () => prisma.$transaction(operation, { maxWait, timeout }),
    2 // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  )
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setupQueryMonitoring() 